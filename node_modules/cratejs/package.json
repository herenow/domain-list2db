{
  "name": "cratejs",
  "description": "This is a node.js driver for the Crate Data Storage.",
  "version": "0.2.13",
  "author": {
    "name": "Me :)"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/herenow/cratejs.git"
  },
  "bugs": {
    "url": "https://github.com/herenow/cratejs/issues"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "crate-connect": "*"
  },
  "devDependencies": {
    "mocha": "1.18.x"
  },
  "keywords": [
    "crate",
    "crate.io",
    "cratejs",
    "crate driver"
  ],
  "readme": "CrateJS\n=======\n[![Build Status](https://travis-ci.org/herenow/cratejs.svg?branch=master)](https://travis-ci.org/herenow/cratejs)\n\nAn extension to [crate-connect](https://github.com/herenow/crate-connect), CrateJS will provide you with better methods for working with [Crate.io](https://www.crate.io/).\n\n\nInstallation\n----------\n```\nnpm install cratejs\n```\n\n\nConnecting\n----------\n```javascript\nvar Crate = require('cratejs');\n\n//You can have as many db instance as you please :)\n//You should probably add this part to another module and export it!\nvar db = module.exports = new Crate({\n  host: 'localhost',\n  port: 4200,\n  /* Optional manual clustering\n  cluster: [\n      {\n          host: '192.168.0.100',\n          port: 4200,\n      }\n  ]\n  */\n});\n```\n* The \"db\" variable will be used in the examples below.\n\n\nSample docs\n----------\n\n***db.Select(tableName)***\n```javascript\nvar findBars = db.Select('fooTable')\n    .columns(['id', 'name', 'bar'])\n    .where({\n        bar: 1\n    })\n    .limit(1)\n    .order('id', 'asc');\n\nfindBars.run(function(err, res) {});\n```\n\n***db.Insert(tableName)***\n```javascript\nvar insertBars = db.Insert('fooTable');\n\n//Inserting a single row\ninsertBars.data({\n    bar: 1\n}).run(function(err, res) {});\n\n//Inserting multiple rows\ninsertBars.data([\n    {\n        bar: 1\n    },\n    {\n        bar: 2\n    },\n]).run(function(err, res) {});\n```\n\n***db.Update(tableName)***\n```javascript\nvar updateBars = db.Update('fooTable')\n    .where({\n        bar: 1\n    })\n    .set({\n        bar: 2\n    });\n\nupdateBars.run(function(err, res) {});\n```\n\n***db.Delete(tableName)***\n```javascript\nvar deleteBars = db.Delete('fooTable')\n    .wh11g10ggere({\n        bar: 1\n    });\n\ndeleteBars.run(function(err, res) {});\n```\n\nMethods inherited from crate-connect\n----------\n\n***db.Query(_queryString)***\n```javascript\nvar getSomeTweets = db.Query('SELECT * FROM tweets LIMIT ?');\n\nvar howMany = 10;\n\ngetSomeTweets.execute([howMany], function(err, res) {});\n```\n\n***db.execute(_queryString)***\n```javascript\ndb.execute('SELECT * FROM tweets LIMIT ?', [10], function(err, response) {});\n```\n\n***blob().put(table, sha1Hash, buffer, callback)***\n```javascript\nvar buffer = new Buffer('sample')\nvar hash = crypto.createHash('sha1').update(buffer).digest('hex')\n\n####blob().put('imagesTable', hash, buffer, function(err) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n* Note that if the sha1 hash is not correct, the blob wont be inserted. **The sha1 hash must be calculated from the blob to be inserted.**\n\n\n***blob().get(table, sha1Hash, callback)***\n```javascript\ndb.blob().get('imagesTable', '8151325dcdbae9e0ff95f9f9658432dbedfdb209', function(err, buffer) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n\n***blob().check(table, sha1Hash, callback)***\n```javascript\ndb.blob().check('imagesTable', '8151325dcdbae9e0ff95f9f9658432dbedfdb209', function(err) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n\n***blob().delete(table, sha1Hash, callback)***\n```javascript\ndb.blob().check('imagesTable', '8151325dcdbae9e0ff95f9f9658432dbedfdb209', function(err) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n\n\nTODO\n---------\n* Blob helper\n* Indexing helpers\n* Shards and replicas helper\n* Try out a binary connector\n\n\nContributors\n---------\nThis was created for the Crate.io data Storage.\n- [herenow](https://github.com/herenow)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/herenow/cratejs",
  "_id": "cratejs@0.2.13",
  "_shasum": "b46710d3d0dd0951a5f582540aa575a68a8f6e35",
  "_from": "cratejs@^0.2.13"
}
