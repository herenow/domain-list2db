{
  "name": "crate-connect",
  "description": "A simple node.js driver to connect to a Crate.io Data Storage.",
  "version": "0.1.51",
  "author": {
    "name": "Me :)"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/herenow/crate-connect.git"
  },
  "bugs": {
    "url": "https://github.com/herenow/crate-connect/issues"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "test": "mocha",
    "debug": "mocha debug"
  },
  "devDependencies": {
    "mocha": "1.18.x"
  },
  "keywords": [
    "crate-connect",
    "crate.io",
    "crate",
    "crate driver"
  ],
  "readme": "crate-connect\n=======\n[![Build Status](https://travis-ci.org/herenow/crate-connect.svg?branch=master)](https://travis-ci.org/herenow/crate-connect)\n\nA simple node.js driver to connect to a Crate.io Data Storage, this was originally part of the [CrateJS](https://github.com/herenow/cratejs) driver, now [CrateJS](https://github.com/herenow/cratejs) is an extension of crate-connect.\n\n\nInstallation\n----------\n```\nnpm install crate-connect\n```\n\n\nSample usage\n----------\n\n```javascript\nvar Crate = require('crate-connect');\n\n// You can have as many db instance as you please :)\n// You should probably add this part to another module and export it!\nvar db = new Crate({\n  host: 'localhost', //Defaults to localhost\n  port: 4200, //Defaults to 4200\n  // You can also send in a cluster of nodes\n  cluster: [\n      {\n        host: 'localhost',\n        port:4200\n      },\n  ]\n});\n\n// Now lets build some queries, using placeholders, you can either use ? or $1, $2, $3...\nvar q = {\n  getSomeTweets: db.Query('SELECT text FROM tweets LIMIT ?'),\n  getReTweeted:  db.Query('SELECT text FROM tweets WHERE retweeted = $1 LIMIT $2'),\n};\n\n// Get some tweets\nq.getSomeTweets.execute([10], onResponse);\n\n// Get only tweets with retweets\nq.getReTweeted.execute([true, 10], onResponse);\n\nfunction onResponse(err, res) {\n    if(err) {\n      //Do something\n      return;\n    }\n\n    console.log('Returned %d rows', res.rowcount);\n    console.log('Columns returned:\\n', res.cols);\n    console.log(res.rows);\n}\n```\n\n\nMethods\n----------\n\n###db.Query(string)\n* This constructs a query and returns an .execute() method.\n\n\n###db.execute(query, statements, callback)\n* This executes a query directly\n* Statements is an optional parameter, you can replace it with the callback\n```javascript\ndb.execute('SELECT * FROM tweets LIMIT ?', [1], function(err, res) {})\n```\n\n\n###db.blob()\n* Methods related to managing blob's\n* Note that this does not construct the sha1 hash from the buffer, you need to do it yourself.\n* Note that if the sha1 hash is not correct, the blob wont be inserted. **The sha1 hash must be calculated from the blob to be inserted.**\n\n####blob().put(table, sha1Hash, buffer, callback)\n```javascript\nvar buffer = new Buffer('sample')\nvar hash = crypto.createHash('sha1').update(buffer).digest('hex')\n\n####blob().put('imagesTable', hash, buffer, function(err) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n\n####blob().get(table, sha1Hash, callback)\n```javascript\ndb.blob().get('imagesTable', '8151325dcdbae9e0ff95f9f9658432dbedfdb209', function(err, buffer) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n\n####blob().check(table, sha1Hash, callback)\n```javascript\ndb.blob().check('imagesTable', '8151325dcdbae9e0ff95f9f9658432dbedfdb209', function(err) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n\n####blob().delete(table, sha1Hash, callback)\n```javascript\ndb.blob().check('imagesTable', '8151325dcdbae9e0ff95f9f9658432dbedfdb209', function(err) {\n    if(err) {\n        //err.statusCode\n    }\n})\n```\n\n\nTODO\n---------\n* Refactor some pieces of this code, its messy :(\n\n\nContributors\n---------\n- [herenow](https://github.com/herenow)\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/herenow/crate-connect",
  "_id": "crate-connect@0.1.51",
  "_shasum": "da944d04576af8656a0cab8400336ca7c0eb6817",
  "_from": "crate-connect@*"
}
